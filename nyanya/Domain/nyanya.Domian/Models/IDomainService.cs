// FileInformation: nyanya/Domian/IDomainService.cs
// CreatedTime: 2014/07/05   5:28 PM
// LastUpdatedTime: 2014/07/06   7:42 PM

namespace Domian.Models
{
    public interface IDomainService
    {
        // 领域中的服务表示一个无状态的操作，它用于实现特定于某个领域的任务。当某个操作不适合放在聚合和值对象上时，
        // 最好的方式便是使用领域服务了。有时我们倾向于使用聚合根上的静态方法来实现这些操作，但是在DDD中，这是一种
        // 代码坏味道。

        // 领域服务与应用服务之间的区别，领域服务关注的是业务逻辑和业务的完整性，而应用服务更关注于事务性和安全性

        // 确保领域服务和通用语言是一致的，并且保证它是无状态的。[Evans,pp.104,106]

        // 执行一个显著的业务操作过程。
        // 对领域对象进行转换。
        // 以多个领域对象作为输入进行计算，结果产生一个值对象。

        // - 过度地使用领域服务将导致贫血领域模型[Fowler, Anemic]，即所有的业务逻辑都位于领域服务中，而不是实体和值对象中。
        // 比如User的验证，如果将验证的过程放置在User类型中，需要先创建一个User，然后再确定其是否被验证。可以使用无
        // 状态的领域服务。
        // 注：我的代码中也使用了其他的方式将领域服务中的业务内化到了对象中，但同时可以将该对象业务不暴露给客户端，而通过
        // 领域服务暴露给客户端

        // 独立接口[Fowler, P of EAA]
        // 是否一定使用独立接口是具有争议的，使用独立接口在一定程度上更多地是为了方便依赖注入
    }
}